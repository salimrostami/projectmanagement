<%- include('partials/logHeader', {user: user}) %>
<section class="exe-sec color2-sec">
  <h2 class="sec-head">Resource Leveling: Exercise</h2>
  <div class="container-fluid">
    <table class="table table-hover">
      <thead>
        <tr>
          <th scope="col">#</th>
          <th scope="col">Activity</th>
          <th scope="col">Duration</th>
          <th scope="col">Predecessors</th>
          <th scope="col">Resources</th>
        </tr>
      </thead>
      <tbody>
        <% for (var i = 0; i < params.n; i++) { %>
          <tr>
            <th scope="row"><%=i+1%></th>
            <td><%=params.N[i]%></td>
            <td><%=proj.D[i]%></td>
            <td><%=proj.pStr[i]%></td>
            <td><%=proj.R[i]+1%></td>
          </tr>
        <% } %>
      </tbody>
    </table>

    <table class="table table-hover sol-table">
      <thead>
        <tr>
          <th scope="col">Assigned Priority Rule:</th>
        </tr>
      </thead>
      <tbody>
          <tr>
            <th scope="row"><%= params.prAbr[proj.prNr] + ": " + params.prNames[proj.prNr] %></th>
          </tr>
      </tbody>
    </table>
  </div>
</section>

<section class="sol-sec color3-sec">
  <h2 class="sec-head">RL Solution: <%=params.prAbr[proj.prNr]%></h2>
  <div class="container-fluid">

    <table class="table table-hover">
      <thead>
        <tr>
          <th scope="col">Priority Level</th>
          <th scope="col">Activity</th>
          <th scope="col">SGS Start Time</th>
          <th scope="col">PGS Start Time</th>
        </tr>
      </thead>
      <tbody>
        <% for (var i = 0; i < params.n; i++) { %>
          <tr>
            <th scope="row"><%=i+1%></th>
            <td><%=params.N[proj.priority[proj.prNr][i]]%></td>
            <td><%=proj.sgsSt[proj.prNr][proj.priority[proj.prNr][i]]%></td>
            <td><%=proj.pgsSt[proj.prNr][proj.priority[proj.prNr][i]]%></td>
          </tr>
        <% } %>
      </tbody>
    </table>

    <table class="table table-hover sol-table">
      <thead>
        <tr>
          <th scope="col">Priority Rule</th>
          <th scope="col">SGS Duration</th>
          <th scope="col">PGS Duration</th>
        </tr>
      </thead>
      <tbody>
          <tr>
            <td scope="row"><%=params.prAbr[proj.prNr]%></td>
            <td><%= proj.sgsMakespan[proj.prNr] %></td>
            <td><%= proj.pgsMakespan[proj.prNr] %></td>
          </tr>
      </tbody>
    </table>

  </div>
</section>

<table class="timetable">
  <thead>
    <tr>
      <th scope="col" style="width: 100px; border-right: 1px solid;">Resource</th>
      <th scope="col" colspan="<%=proj.sgsMakespan[proj.prNr]+1%>"><%=params.prAbr[proj.prNr]%> Priority Rule: SGS Schedule</th>
    </tr>
  </thead>
  <tbody>
    <% for (var r = 0; r < params.rMax; r++) { %>
      <tr>
        <th scope="row" style="border-top: 1px solid; border-bottom: 1px solid; border-top: 1px solid;"><%=r+1%></th>
        <% for (var t = 0; t < proj.sgsMakespan[proj.prNr]+1; t++) { %>
          <% var schBool = false; %>
          <% for (var i = 0; i < params.n; i++) { %>
            <%if ((proj.R[i] === r) && (proj.sgsSt[proj.prNr][i] === t)) {%>
              <td colspan="<%=proj.D[i]%>" style="border: 1px solid; background-color:#95E1D3"><%=params.N[i]%></td>
              <% schBool = true; %>
              <% t = t + proj.D[i] - 1;%>
              <% break; %>
            <%}%>
          <%}%>
          <% if (!schBool) { %>
            <td style="border: 1px solid;"> </td>
          <%}%>
        <%}%>
      </tr>
    <% } %>
    <tr>
      <th></th>
      <% for (var t = 0; t < proj.sgsMakespan[proj.prNr]+1; t++) { %>
        <td><%=t%></td>
      <%}%>
    </tr>
  </tbody>
</table>

<table class="timetable">
  <thead>
    <tr>
      <th scope="col" style="width: 100px; border-right: 1px solid;">Resource</th>
      <th scope="col" colspan="<%=proj.pgsMakespan[proj.prNr]+1%>"><%=params.prAbr[proj.prNr]%> Priority Rule: PGS Schedule</th>
    </tr>
  </thead>
  <tbody>
    <% for (var r = 0; r < params.rMax; r++) { %>
      <tr>
        <th scope="row" style="border-top: 1px solid; border-bottom: 1px solid; border-top: 1px solid;"><%=r+1%></th>
        <% for (var t = 0; t < proj.pgsMakespan[proj.prNr]+1; t++) { %>
          <% var schBool = false; %>
          <% for (var i = 0; i < params.n; i++) { %>
            <%if ((proj.R[i] === r) && (proj.pgsSt[proj.prNr][i] === t)) {%>
              <td colspan="<%=proj.D[i]%>" style="border: 1px solid; background-color:#95E1D3"><%=params.N[i]%></td>
              <% schBool = true; %>
              <% t = t + proj.D[i] - 1;%>
              <% break; %>
            <%}%>
          <%}%>
          <% if (!schBool) { %>
            <td style="border: 1px solid;"> </td>
          <%}%>
        <%}%>
      </tr>
    <% } %>
    <tr>
      <th></th>
      <% for (var t = 0; t < proj.pgsMakespan[proj.prNr]+1; t++) { %>
        <td><%=t%></td>
      <%}%>
    </tr>
  </tbody>
</table>

<section class="sol-sec color3-sec">
  <h2 class="sec-head">Different Priority Rules</h2>
  <div class="container-fluid">

    <table class="table table-hover">
      <thead>
        <tr>
          <th scope="col" style="text-align: left">Priority Rule</th>
          <th scope="col">SGS Duration</th>
          <th scope="col">PGS Duration</th>
        </tr>
      </thead>
      <tbody>
          <% for (var i = 0; i < params.prAbr.length; i++) {%>
            <tr>
              <td scope="row" style="text-align: left"><%=params.prAbr[i] + ": " + params.prNames[i]%></td>
              <td><%= proj.sgsMakespan[i] %></td>
              <td><%= proj.pgsMakespan[i] %></td>
            </tr>
          <%}%>
      </tbody>
    </table>

  </div>
</section>

<div class="md:flex flex-col md:flex-row md:min-h-screen w-full max-w-screen-xl mx-auto">
  <div id="navSide" class="flex flex-col w-full md:w-48 text-gray-700 bg-white flex-shrink-0"></div>
  <!-- * * * * * * * * * * * * * -->
  <!-- Start of GoJS sample code -->
  <script src="https://unpkg.com/gojs/release/go-debug.js"></script>
  <div id="allSampleContent" class="p-4 w-full">
    <script id="code">
      function init() {

        // Since 2.2 you can also author concise templates with method chaining instead of GraphObject.make
        // For details, see https://gojs.net/latest/intro/buildingObjects.html
        const $ = go.GraphObject.make;  // for more concise visual tree definitions

        // colors used, named for easier identification
        var blue = "#0288D1";
        var pink = "#B71C1C";
        var pinkfill = "#F8BBD0";
        var bluefill = "#B3E5FC";

        myDiagram =
          $(go.Diagram, "myDiagramDiv",
            {
              initialAutoScale: go.Diagram.Uniform,
              layout: $(go.LayeredDigraphLayout)
            });

        // The node template shows the activity name in the middle as well as
        // various statistics about the activity, all surrounded by a border.
        // The border's color is determined by the node data's ".critical" property.
        // Some information is not available as properties on the node data,
        // but must be computed -- we use converter functions for that.
        myDiagram.nodeTemplate =
          $(go.Node, "Auto",
            $(go.Shape, "Rectangle",  // the border
              { fill: "white", strokeWidth: 2 },
              new go.Binding("fill", "critical", b => b ? pinkfill : bluefill),
              new go.Binding("stroke", "critical", b => b ? pink : blue)),
            $(go.Panel, "Table",
              { padding: 0.5 },
              $(go.RowColumnDefinition, { column: 1, separatorStroke: "black" }),
              $(go.RowColumnDefinition, { column: 2, separatorStroke: "black" }),
              $(go.RowColumnDefinition, { row: 1, separatorStroke: "black", background: "white", coversSeparators: true }),
              $(go.RowColumnDefinition, { row: 2, separatorStroke: "black" }),
              $(go.TextBlock, // earlyStart
                new go.Binding("text", "earlyStart"),
                { row: 0, column: 0, margin: 5, textAlign: "center" }),
              $(go.TextBlock,
                new go.Binding("text", "length"),
                { row: 0, column: 1, margin: 5, textAlign: "center" }),
              $(go.TextBlock,  // earlyFinish
                new go.Binding("text", "",
                  d => (d.earlyStart + d.length).toFixed(0)),
                { row: 0, column: 2, margin: 5, textAlign: "center" }),

              $(go.TextBlock,
                new go.Binding("text", "text"),
                {
                  row: 1, column: 0, columnSpan: 3, margin: 5,
                  textAlign: "center", font: "bold 14px sans-serif"
                }),

              $(go.TextBlock,  // lateStart
                new go.Binding("text", "",
                  d => (d.lateFinish - d.length).toFixed(0)),
                { row: 2, column: 0, margin: 5, textAlign: "center" }),
              $(go.TextBlock,  // slack
                new go.Binding("text", "",
                  d => (d.lateFinish - (d.earlyStart + d.length)).toFixed(0)),
                { row: 2, column: 1, margin: 5, textAlign: "center" }),
              $(go.TextBlock, // lateFinish
                new go.Binding("text", "lateFinish"),
                { row: 2, column: 2, margin: 5, textAlign: "center" })
            )  // end Table Panel
          );  // end Node

        // The link data object does not have direct access to both nodes
        // (although it does have references to their keys: .from and .to).
        // This conversion function gets the GraphObject that was data-bound as the second argument.
        // From that we can get the containing Link, and then the Link.fromNode or .toNode,
        // and then its node data, which has the ".critical" property we need.
        //
        // But note that if we were to dynamically change the ".critical" property on a node data,
        // calling myDiagram.model.updateTargetBindings(nodedata) would only update the color
        // of the nodes.  It would be insufficient to change the appearance of any Links.
        function linkColorConverter(linkdata, elt) {
          var link = elt.part;
          if (!link) return blue;
          var f = link.fromNode;
          if (!f || !f.data || !f.data.critical) return blue;
          var t = link.toNode;
          if (!t || !t.data || !t.data.critical) return blue;
          return pink;  // when both Link.fromNode.data.critical and Link.toNode.data.critical
        }

        // The color of a link (including its arrowhead) is red only when both
        // connected nodes have data that is ".critical"; otherwise it is blue.
        // This is computed by the binding converter function.
        myDiagram.linkTemplate =
          $(go.Link,
            { toShortLength: 6, toEndSegmentLength: 20 },
            $(go.Shape,
              { strokeWidth: 4 },
              new go.Binding("stroke", "", linkColorConverter)),
            $(go.Shape,  // arrowhead
              { toArrow: "Triangle", stroke: null, scale: 1.5 },
              new go.Binding("fill", "", linkColorConverter))
          );

        var nodeDataArray = <%- JSON.stringify(proj.goNodes) %>;
        var linkDataArray = <%- JSON.stringify(proj.goLinks) %>;
        // var nodeDataArray = [
        //   { key: 1, text: "Start", length: 0, earlyStart: 0, lateFinish: 0, critical: true },
        //   { key: 2, text: "a", length: 4, earlyStart: 0, lateFinish: 4, critical: true },
        //   { key: 3, text: "b", length: 5.33, earlyStart: 0, lateFinish: 9.17, critical: false },
        //   { key: 4, text: "c", length: 5.17, earlyStart: 4, lateFinish: 9.17, critical: true },
        //   { key: 5, text: "d", length: 6.33, earlyStart: 4, lateFinish: 15.01, critical: false },
        //   { key: 6, text: "e", length: 5.17, earlyStart: 9.17, lateFinish: 14.34, critical: true },
        //   { key: 7, text: "f", length: 4.5, earlyStart: 10.33, lateFinish: 19.51, critical: false },
        //   { key: 8, text: "g", length: 5.17, earlyStart: 14.34, lateFinish: 19.51, critical: true },
        //   { key: 9, text: "Finish", length: 0, earlyStart: 19.51, lateFinish: 19.51, critical: true }
        // ];
        // var linkDataArray = [
        //   { from: 1, to: 2 },
        //   { from: 1, to: 3 },
        //   { from: 2, to: 4 },
        //   { from: 2, to: 5 },
        //   { from: 3, to: 6 },
        //   { from: 4, to: 6 },
        //   { from: 5, to: 7 },
        //   { from: 6, to: 8 },
        //   { from: 7, to: 9 },
        //   { from: 8, to: 9 }
        // ];
        myDiagram.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);

        // create an unbound Part that acts as a "legend" for the diagram
        myDiagram.add(
          $(go.Node, "Auto",
            $(go.Shape, "Rectangle",  // the border
              { fill: bluefill }),
            $(go.Panel, "Table",
              $(go.RowColumnDefinition, { column: 1, separatorStroke: "black" }),
              $(go.RowColumnDefinition, { column: 2, separatorStroke: "black" }),
              $(go.RowColumnDefinition, { row: 1, separatorStroke: "black", background: bluefill, coversSeparators: true }),
              $(go.RowColumnDefinition, { row: 2, separatorStroke: "black" }),
              $(go.TextBlock, "Early Start",
                { row: 0, column: 0, margin: 5, textAlign: "center" }),
              $(go.TextBlock, "Duration",
                { row: 0, column: 1, margin: 5, textAlign: "center" }),
              $(go.TextBlock, "Early Finish",
                { row: 0, column: 2, margin: 5, textAlign: "center" }),

              $(go.TextBlock, "Activity Name",
                {
                  row: 1, column: 0, columnSpan: 3, margin: 5,
                  textAlign: "center", font: "bold 14px sans-serif"
                }),

              $(go.TextBlock, "Late Start",
                { row: 2, column: 0, margin: 5, textAlign: "center" }),
                $(go.TextBlock, "Float",
                { row: 2, column: 1, margin: 5, textAlign: "center" }),
              $(go.TextBlock, "Late Finish",
                { row: 2, column: 2, margin: 5, textAlign: "center" })
            )  // end Table Panel
          ));
      }
      window.addEventListener('DOMContentLoaded', init);
    </script>

    <div id="sample">
      <div id="myDiagramDiv" style="border: solid 1px black; width:100%; height:400px"></div>
    </div>
  </div>
  <!-- * * * * * * * * * * * * * -->
  <!--  End of GoJS sample code  -->
</div>

<%- include('partials/footer') %>
